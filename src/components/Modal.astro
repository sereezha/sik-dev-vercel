---
import A11yDialog from 'a11y-dialog';
import Button from './Button.astro';
import Paragraph from './Paragraph.astro';
import { Icon } from 'astro-icon/components';
interface Props {
  id: string;
  showOnMount?: boolean;
  description?: string;
  showCloseButton?: boolean;
  type?: 'info' | 'success' | 'error';
}

const {
  id,
  showOnMount = false,
  description,
  type = 'info',
  showCloseButton = false,
} = Astro.props;
const titleId = `${id}-title`;
---

<div
  class={`dialog-container dialog-container--${type}`}
  id={id}
  aria-labelledby={titleId}
  data-show-on-mount={showOnMount.toString()}
  data-a11y-dialog={id}
  aria-hidden={'true'}
>
  <div class="dialog-overlay" data-a11y-dialog-hide></div>
  <div class="dialog" role="document">
    <div class="dialog-content">
      {
        showCloseButton && (
          <button
            class="dialog-close"
            type="button"
            data-a11y-dialog-hide
            aria-label="Закрити вікно"
          >
            <Icon width={32} height={32} name="close" />
          </button>
        )
      }
      <h1 class="dialog-title heading" id={titleId}>
        <slot name="title" />
      </h1>
      {
        description && (
          <div class="dialog-description">
            <Paragraph set:html={description} />
          </div>
        )
      }
      <div class="dialog-buttons">
        <slot name="buttons" />
      </div>
    </div>
  </div>
</div>

<style is:global>
  .dialog-close {
    position: absolute;
    top: 8px;
    right: 8px;
    display: flex;
    width: 32px;
    height: 32px;
    padding: 0;
    border: none;
    background: none;
    cursor: pointer;
  }

  .dialog-container,
  .dialog-overlay {
    position: fixed;
    inset: 0;
  }

  .dialog-container--info .dialog-content {
    background-color: #6f6f72;
  }

  .dialog-container--success .dialog-content {
    background-color: #78a782;
  }

  .dialog-container--error .dialog-content {
    background-color: var(--main-error);
  }

  .dialog-container {
    z-index: 999;
    display: flex;
  }

  .dialog-container[aria-hidden='true'] {
    display: none;
  }

  .dialog-overlay {
    background-color: rgba(0, 0, 0, 0.67);
  }

  .dialog-description {
    max-width: 560px;
    width: 100%;
    margin-top: 24px;
  }

  .dialog {
    --padding-inline: 16px;
    margin: auto;
    padding-inline: var(--padding-inline);
    z-index: 2;
    position: relative;
    max-width: calc(720px + 2 * var(--padding-inline));
    width: 100%;
  }

  .dialog-content {
    position: relative;
    display: flex;
    flex-direction: column;
    padding: 24px 16px 16px;
    min-height: 406px;
  }

  .dialog-title {
    font-size: 28px;
    line-height: 1.14;
    max-width: 660px;
  }

  .dialog-buttons {
    display: grid;
    gap: 8px;
    margin-top: auto;
  }

  @media screen and (min-width: 768px) {
    .dialog {
      --padding-inline: 40px;
    }

    .dialog-title {
      font-size: 56px;
      line-height: 0.85;
    }

    .dialog-buttons {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: auto;
      align-self: end;
    }
  }
</style>

<script>
  import A11yDialog from 'a11y-dialog';
  import { lock, unlock } from 'tua-body-scroll-lock';

  class ModalController {
    private dialogs: Map<string, A11yDialog> = new Map();

    constructor() {
      document.addEventListener(
        'DOMContentLoaded',
        this.initializeDialogs.bind(this)
      );

      this.show = this.show.bind(this);
      this.hide = this.hide.bind(this);
    }

    private initializeDialogs() {
      document.querySelectorAll('.dialog-container').forEach((container) => {
        const id = container.id;
        const showOnMount =
          container.getAttribute('data-show-on-mount') === 'true';
        const isInStorage = localStorage.getItem(id);
        if (isInStorage) {
          container.remove();
          return;
        }
        if (id) {
          const dialog = new A11yDialog(container as HTMLElement);
          dialog
            .on('show', () => {
              lock();
            })
            .on('hide', () => {
              unlock();
            });
          if (showOnMount) {
            dialog.show();
          }

          this.dialogs.set(id, dialog);
        }
      });
    }

    public show(id: string) {
      const dialog = this.dialogs.get(id);
      if (dialog) {
        dialog.show();
      } else {
        console.warn(`Modal with id "${id}" not found.`);
      }
    }

    public destroy(id: string) {
      const dialog = this.dialogs.get(id);
      if (dialog) {
        dialog.destroy();
      } else {
        console.warn(`Modal with id "${id}" not found.`);
      }
    }

    public hide(id: string) {
      const dialog = this.dialogs.get(id);
      if (dialog) {
        dialog.hide();
      } else {
        console.warn(`Modal with id "${id}" not found.`);
      }
    }
  }

  window.modalController = new ModalController();
</script>
