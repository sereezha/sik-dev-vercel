---
import A11yDialog from 'a11y-dialog';
import Button from '../Button.astro';
import Paragraph from '../Paragraph.astro';
import { Icon } from 'astro-icon/components';
interface Props {
  id: string;
  showOnMount?: boolean;
  description?: string;
  showCloseButton?: boolean;
  type?: 'info' | 'success' | 'error';
}

const {
  id,
  showOnMount = false,
  description,
  type = 'info',
  showCloseButton = false,
} = Astro.props;
const titleId = `${id}-title`;
---

<div
  class={`dialog-container dialog-container--${type}`}
  id={id}
  data-js-modal-container
  aria-labelledby={titleId}
  data-show-on-mount={showOnMount.toString()}
  data-a11y-dialog={id}
  aria-hidden="true"
>
  <div class="dialog-overlay" data-a11y-dialog-hide></div>
  <div class="dialog" role="document">
    <div class="dialog-content">
      {
        showCloseButton && (
          <button
            class="dialog-close"
            type="button"
            data-a11y-dialog-hide
            aria-label="Закрити вікно"
          >
            <Icon width={32} height={32} name="close" />
          </button>
        )
      }
      <h1 class="dialog-title heading" id={titleId}>
        <slot name="title" />
      </h1>
      {
        description && (
          <div class="dialog-description">
            <Paragraph set:html={description} />
          </div>
        )
      }
      <div class="dialog-buttons">
        <slot name="buttons" />
      </div>
    </div>
  </div>
</div>

<style is:global lang="scss">
  .dialog-close {
    position: absolute;
    top: 8px;
    right: 8px;
    display: flex;
    width: 32px;
    height: 32px;
    padding: 0;
    border: none;
    background: none;
    cursor: pointer;
  }

  .dialog-container,
  .dialog-overlay {
    position: fixed;
    inset: 0;
  }

  .dialog-container--info .dialog-content {
    background-color: #6f6f72;
  }

  .dialog-container--success .dialog-content {
    background-color: #78a782;
  }

  .dialog-container--error .dialog-content {
    background-color: var(--main-error);
  }

  .dialog-container {
    z-index: 1000;
    display: flex;
  }

  .dialog-container[aria-hidden='true'] {
    display: none;
  }

  .dialog-overlay {
    background-color: var(--overlay-color);
  }

  .dialog-description {
    max-width: 560px;
    width: 100%;
    margin-top: 24px;
  }

  .dialog {
    --padding-inline: 16px;

    margin: auto;
    padding-inline: var(--padding-inline);
    z-index: 1000;
    position: relative;
    max-width: calc(72rem + 2 * var(--padding-inline));
    width: 100%;
    @media screen and (min-width: $bp-tablet-min) {
      --padding-inline: 40px;
    }
  }

  .dialog-buttons button.button {
    @media screen and (max-width: $bp-tablet-max) {
      font-size: 1.7rem;
    }
  }

  .dialog-content {
    position: relative;
    display: flex;
    flex-direction: column;
    padding: 24px 16px 16px;
    min-height: 406px;
  }

  .dialog-title {
    font-size: 2.8rem;
    line-height: 1.14;
    max-width: 66rem;

    @media screen and (min-width: $bp-tablet-min) {
      font-size: 5.6rem;
      line-height: 0.85;
    }
  }

  .dialog-buttons {
    display: grid;
    gap: 8px;
    margin-top: auto;

    @media screen and (min-width: $bp-tablet-min) {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: auto;
      align-self: end;
    }
  }
</style>

<script>
  import { ModalController } from './Modal.ts';

  window.modalController = new ModalController();
</script>
