---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'button'> {
  size?: 'medium' | 'small';
  appearance?: 'text' | 'default';
  href?: string;
  fullWidth?: boolean;
  className?: string;
  isLoading?: boolean;
}
const {
  size = 'medium',
  href,
  fullWidth = false,
  appearance = 'default',
  className,
  isLoading = false,
  ...otherProps
} = Astro.props;
const Tag = href ? 'a' : 'button';
---

<Tag
  type={href ? undefined : 'button'}
  href={href}
  data-loading={isLoading}
  data-full-width={fullWidth}
  class:list={['button', className, `button--appearance-${appearance}`]}
  {...otherProps}
>
  <slot />
  <span class="loader"
    ><svg
      class="loader-icon"
      xmlns="http://www.w3.org/2000/svg"
      width="40"
      height="40"
      display="block"
      preserveAspectRatio="xMidYMid"
      viewBox="0 0 100 100"
      ><circle
        cx="50"
        cy="50"
        r="35"
        fill="none"
        stroke="#1a1a1f"
        stroke-dasharray="164.93361431346415 56.97787143782138"
        stroke-width="5"></circle></svg
    >
  </span>
</Tag>

<style>
  .button {
    --button-background-color: var(--main-white);
    --button-color: #1a1a1f;
    --button-color-hover: var(--button-color);
    --button-background-color-hover: #dedcd9;
    --button-outline-width: var(--outline-width, 1px);
    --button-outline-offset: var(--outline-offset, 2px);
    --button-outline-color: var(--outline-color, var(--main-white));
    --_button-width: var(--button-width, auto);

    appearance: none;
    display: inline-flex;
    justify-content: center;
    text-decoration: none;
    font-size: 21px;
    font-weight: 600;
    font-family: 'Scuto Sans', sans-serif;
    line-height: 1.14;
    text-align: center;
    background-color: var(--button-background-color);
    color: var(--button-color);
    padding: 0.57em 1.14em;
    border: none;
    border-radius: 2px;
    cursor: pointer;
    font-style: normal;
    font-weight: 600;
    transition-duration: 0.2s;
    transition-property: background-color, color;
    position: relative;
    width: var(--_button-width);
  }

  .button:hover {
    background-color: var(--button-background-color-hover);
    color: var(--button-color-hover);
  }

  .button:focus-visible {
    outline: var(--button-outline-width) solid var(--button-outline-color);
    outline-offset: var(--button-outline-offset);
  }

  .button[data-full-width] {
    display: flex;
    width: 100%;
  }

  .button--appearance-text {
    --button-background-color: transparent;
    --button-color: var(--main-white);
    --button-color-hover: var(--main-white);
    --button-background-color-hover: var(--main-black);
    --button-outline-width: 2px;
    --button-outline-offset: -2px;
  }

  .loader {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: none;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    background-color: var(--button-background-color);
  }

  .loader-icon {
    width: 40px;
    height: 40px;
    transform-origin: center;
    animation: spin 1s linear infinite;
  }

  .button[data-loading] {
    pointer-events: none;
  }

  .button[data-loading] .loader {
    display: flex;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style>
