---
import Section from './Section.astro';
import SectionIntro from './SectionIntro.astro';
import SectionTitle from './SectionTitle.astro';
---

<Section id="form">
  <div class="content">
    <SectionIntro>
      <SectionTitle>
        зробіть подарунок собі або друзям, збирайтеся разом і відкривайте нове
      </SectionTitle>
    </SectionIntro>
    <form novalidate class="hero-form js-form">
      <div class="hero-form__inputs">
        <input
          name="phone"
          id="phone"
          placeholder="телефон"
          class="hero-form__input js-hero-input"
          type="tel"
        />
        <input
          name="telegram"
          id="telegram"
          placeholder="телеграм"
          class="hero-form__input js-hero-input"
        />
        <div class="radiogroup radiogroup--text-left">
          <label class="radio-item"
            ><input
              value="1"
              name="bottles"
              type="radio"
              class="radio-input visually-hidden"
              checked
            /><span class="radio-inner"
              ><span class="radio-inner__text">1 пляшка</span></span
            ></label
          ><label class="radio-item"
            ><input
              value="2"
              name="bottles"
              type="radio"
              class="radio-input visually-hidden"
            /><span class="radio-inner"
              ><span class="radio-inner__text">2 пляшки</span></span
            ></label
          >
          <label class="radio-item"
            ><input
              value="special"
              name="bottles"
              type="radio"
              class="radio-input visually-hidden"
            /><span class="radio-inner"
              ><span class="radio-inner__text">спешиал</span></span
            ></label
          >
        </div>
        <div class="radiogroup">
          <label class="radio-item"
            ><input
              value="1"
              name="months"
              type="radio"
              class="radio-input visually-hidden"
              checked
            /><span class="radio-inner"
              ><span class="radio-inner__text"
                >1<span class="radio-inner__hide">міс.</span></span
              ></span
            ></label
          ><label class="radio-item"
            ><input
              value="3"
              name="months"
              type="radio"
              class="radio-input visually-hidden"
            /><span class="radio-inner"
              ><span class="radio-inner__text"
                >3<span class="radio-inner__hide">міс.</span></span
              ></span
            ></label
          ><label class="radio-item"
            ><input
              value="6"
              name="months"
              type="radio"
              class="radio-input visually-hidden"
            /><span class="radio-inner"
              ><span class="radio-inner__text"
                >6<span class="radio-inner__hide">міс.</span></span
              ></span
            ></label
          ><label class="radio-item"
            ><input
              value="12"
              name="months"
              type="radio"
              class="radio-input visually-hidden"
            /><span class="radio-inner"
              ><span class="radio-inner__text"
                >12<span class="radio-inner__hide">міс.</span></span
              ></span
            ></label
          >
        </div>
      </div>
      <div class="hero-form__submit-wrapper">
        <button class="hero-form__button js-submit-button"
          ><span class="hero-form__button-text"
            >замовити<span
              ><span class="js-submit-button-price">1900</span>₴</span
            ></span
          ></button
        >
        <div class="js-form-footnote hero-form__footnote is-hidden">
          <span class="js-form-footnote-old-price hero-form__footnote-old-price"
            >4700</span
          >
          <span class="js-form-footnote-new-price">4600</span>₴ в місяць
        </div>
      </div>
    </form>
  </div>
  <div class="toast-container"></div>
  <div class="notification-block">
    <button class="notification-block__close" type="button"
      ><svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        fill="none"
        viewBox="0 0 20 20"
      >
        <circle cx="10" cy="10" r="10" fill="#3A4A61"></circle>
        <path stroke="#FAFAFA" stroke-width="2" d="m6 6 8 8M14 6l-8 8"></path>
      </svg>
      <span class="visually-hidden">закрити</span></button
    >
    <div class="notification-block__wrapper">
      <div class="notification-block__row">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="17"
          height="32"
          fill="none"
          viewBox="0 0 17 32"
        >
          <path
            fill="#FAFAFA"
            fill-rule="evenodd"
            d="M10.5 1.11c-.06.11-.27.84-.49 1.62-.21.78-.69 2.45-1.05 3.71l-.66 2.3-1.06.65c-.58.36-1.2.84-1.36 1.07-.2.27-1.13 3.5-2.7 9.4C.93 28.2.77 28.9.95 29.3c.43.96 5.27 2.3 6.23 1.74.33-.2.58-1.01 2.85-9.31 2.78-10.13 2.67-9.49 1.76-11a3.92 3.92 0 0 1-.5-1.14c-.03-.21.35-1.96.85-3.88.5-1.93.9-3.64.9-3.81.01-.26-.19-.37-1.23-.65-.87-.23-1.27-.27-1.33-.13Z"
            clip-rule="evenodd"></path>
        </svg>
        <p>клесік — одна хороша пляшка вина</p>
      </div>
      <div class="notification-block__row">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="17"
          height="30"
          fill="none"
          viewBox="0 0 17 30"
        >
          <g fill="#FAFAFA" fill-rule="evenodd" clip-rule="evenodd">
            <path
              d="m11.67.21-.04 1.66c0 .8-.03 2.5-.05 3.79L11.53 8l-.83.88c-.46.5-.92 1.1-1.02 1.36-.12.31-.18 3.61-.18 9.62 0 8.46.02 9.17.3 9.5.65.8 5.57.85 6.34.06.26-.27.3-1.1.34-9.55.05-10.32.12-9.68-1.13-10.88a3.85 3.85 0 0 1-.77-.95 33.1 33.1 0 0 1-.18-3.9A60.74 60.74 0 0 0 14.3.3c-.07-.25-.28-.3-1.34-.3-.88 0-1.27.06-1.29.21ZM2.67.21l-.04 1.66c0 .8-.03 2.5-.05 3.79L2.53 8l-.83.88c-.46.5-.92 1.1-1.02 1.36-.12.31-.18 3.61-.18 9.62 0 8.46.02 9.17.3 9.5.65.8 5.57.85 6.34.06.26-.27.3-1.1.34-9.55C7.53 9.56 7.6 10.2 6.35 9a3.85 3.85 0 0 1-.77-.95c-.08-.2-.16-1.96-.18-3.9A60.72 60.72 0 0 0 5.3.3C5.23.05 5.02 0 3.96 0 3.08 0 2.7.06 2.67.21Z"
            ></path>
          </g>
        </svg>
        <p>топчик — одна хороша та одна дуже хороша пляшка вина</p>
      </div>
      <div class="notification-block__row">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="17"
          height="32"
          fill="none"
        >
          <path
            fill="#DF831E"
            fill-rule="evenodd"
            d="M10.492 1.11c-.048.111-.263.84-.479 1.619-.215.779-.688 2.45-1.052 3.713l-.66 2.296-1.06.652c-.582.358-1.195.84-1.36 1.069-.198.274-1.127 3.5-2.71 9.409C.94 28.186.776 28.893.958 29.295c.435.958 5.272 2.3 6.236 1.73.33-.196.58-1.007 2.85-9.307 2.772-10.128 2.67-9.488 1.751-10.991-.252-.412-.478-.926-.502-1.142-.024-.216.361-1.966.856-3.89.495-1.923.903-3.636.906-3.808.005-.262-.192-.365-1.235-.644-.866-.232-1.268-.272-1.328-.132Z"
            clip-rule="evenodd"></path>
        </svg>
        <p>спешиал — одна неймовірна та рідкісна пляшка вина</p>
      </div>
    </div>
  </div>
</Section>

<style lang="scss">
  .notification-block {
    position: fixed;
    z-index: 5;
    top: 0;
    left: 50%;
    width: 248px;
    background-color: var(--evening-blue, #596b86);
    border-radius: 8px;
    transform: translateX(-50%) translateY(-100%);
    transition: transform 0.3s;
  }

  .notification-block__wrapper {
    padding: 16px;
    display: grid;
    gap: 8px;
    border-radius: 8px;
  }

  .notification-block.is-visible {
    transform: translateX(-50%) translateY(24px);
  }

  .notification-block__close {
    border: none;
    background: none;
    padding: 0;
    display: flex;
    cursor: pointer;
    position: absolute;
    top: 8px;
    right: 8px;
  }

  .notification-block__row {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .notification-block__row svg {
    width: 16px;
    flex-shrink: 0;
  }

  .notification-block__row p {
    color: var(--natural-white, #fafafa);
    font-size: 14px;
    font-style: normal;
    font-weight: 600;
    line-height: 1.14;
    letter-spacing: 0.56px;
  }

  .hero-form {
    max-width: 400px;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    display: grid;
    gap: 32px;
  }

  .hero-form.is-disabled {
    pointer-events: none;
  }

  .hero-form__submit-wrapper {
    display: grid;
    text-align: center;
  }

  .hero-form__footnote {
    margin-top: 8px;
    color: var(--natural-white, #fafafa);
    font-feature-settings: 'ss04' on;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.4;
    letter-spacing: 0.56px;
  }

  .hero-form__footnote.is-hidden {
    visibility: hidden;
  }

  .hero-form__footnote-old-price {
    text-decoration-line: line-through;
    color: rgba(250, 250, 250, 0.67);
  }

  .hero-form__inputs {
    display: grid;
    gap: 8px;
  }

  .hero-form__input {
    padding: 14px 24px 17px;
    border-radius: 114px;
    border: 1px solid transparent;
    background: var(--noble-pink, #310421);
    backdrop-filter: blur(32px);
    color: var(--natural-white);
    font-size: 21px;
    font-weight: 400;
    line-height: 1;
    letter-spacing: -0.21px;
    transition: border-color, 0.2s;
  }

  .hero-form__input.has-error {
    border: 1px solid var(--bloody-red, #be3834);
  }

  .hero-form__input.has-error::placeholder {
    color: var(--bloody-red, #be3834);
  }

  .hero-form__input:focus {
    outline: 0;
  }

  .hero-form__input::placeholder {
    color: rgba(250, 250, 250, 0.37);
    transition: color, 0.2s;
  }

  .hero-form__button {
    position: relative;
    font-feature-settings:
      'dlig' on,
      'ss04' on;
    border: none;
    cursor: pointer;
    padding: 20px 32px 27px;
    border-radius: 112px;
    background: var(--ripe-orange);
    color: var(--noble-pink);
    font-size: 24px;
    font-style: normal;
    font-weight: 700;
    line-height: 1;
    letter-spacing: 0.72px;
    margin-bottom: 8px;
    transition: background-color 0.2s;
    font-family: BudujSansHeight;
  }

  .hero-form__button.is-loading .hero-form__button-text {
    visibility: hidden;
    opacity: 0;
  }

  .hero-form__button-text {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .hero-form__button.is-loading::after {
    content: '';
    position: absolute;
    width: 48px;
    height: 48px;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    margin: auto;
    border: 4px solid transparent;
    border-top-color: #fff;
    border-radius: 50%;
    animation: button-loading-spinner 1s ease infinite;
  }

  .hero-form__button.is-success {
    transition: none;
    background-color: var(--tissue-biege, #e6ded1);
    color: var(--night-dark, #292428);
  }

  .hero-form__button.is-error {
    transition: none;
    background-color: var(--bloody-red);
    color: var(--natural-white);
  }

  .hero-form__button:not(.hero-form__button.is-success):not(
      .hero-form__button.is-error
    ):hover {
    background-color: #c77113;
  }

  .content {
    display: grid;
    gap: 40px;
  }

  @media screen and (min-width: 768px) {
    .content {
      gap: 64px;
    }
  }

  @media screen and (min-width: 1280px) {
    .content {
      gap: 72px;
    }
  }

  .radiogroup {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    background: var(--noble-pink, #310421);
    border-radius: 144px;
  }

  .radiogroup--text-left .radio-inner {
    text-align: left;
  }

  .radiogroup:not(.radiogroup--text-left) .radio-item:has(input:checked) {
    width: max-content;
  }

  .radio-item {
    display: block;
    padding: 8px;
    cursor: pointer;
    pointer-events: inherit;
  }

  input.radio-input:checked ~ .radio-inner {
    background: var(--natural-white, #fafafa);
    text-align: left;
    justify-content: flex-start;
  }

  .radiogroup--text-left input.radio-input:checked ~ .radio-inner {
    justify-content: space-between;
  }

  input.radio-input:checked ~ .radio-inner .radio-inner__hide {
    display: inline-block;
  }

  input.radio-input:checked ~ .radio-inner {
    color: var(--night-dark, #292428);
  }

  .radio-inner__hide {
    display: none;
  }

  .radiogroup--text-left .radio-inner {
    justify-content: space-between;
  }

  @media screen and (max-width: 500px) {
    .radio-inner__hide svg {
      max-width: 40px;
    }
  }

  .radio-inner {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    text-align: center;
    padding: 3px 16px 5px;
    color: rgba(250, 250, 250, 0.37);
    font-feature-settings:
      'dlig' on,
      'ss04' on;
    font-size: 18px;
    font-weight: 400;
    line-height: 1.52;
    letter-spacing: -0.21px;
    border-radius: 4px;
  }

  .radio-item:first-child .radio-inner {
    border-radius: 144px 24px 24px 144px;
  }

  .radio-item:last-child .radio-inner {
    border-radius: 24px 144px 144px 24px;
  }

  @media screen and (min-width: 768px) {
    .radio-inner {
      font-size: 21px;
    }
  }

  .toast {
    position: fixed;
    top: 24px;
    left: 50%;
    transform: translateY(calc(-100% - 24px)) translateX(-50%);
    display: grid;
    gap: 16px;
    padding: 8px 24px 12px;
    border-radius: 8px;
    background: var(--bloody-red, #be3834);
    color: var(--natural-white, #fafafa);
    text-align: center;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.42;
    letter-spacing: 0.56px;
    transition: transform 0.3s;
    max-width: 300px;
    width: 100%;
    z-index: 3;
  }

  .toast--show {
    transform: translateY(0) translateX(-50%);
  }
</style>

<script>
  import { toastManager } from '../toast/ToastManager';
  import { actions } from 'astro:actions';

  const PHONE_REGEX = /^\+?3?8?(0\d{9})$/;
  const form = document.querySelector('.js-form')! as HTMLFormElement;
  const footnote = form.querySelector('.js-form-footnote')!;
  const footnoteOldPrice = form.querySelector('.js-form-footnote-old-price')!;
  const footnoteNewPrice = form.querySelector('.js-form-footnote-new-price')!;
  const submitButton = form.querySelector('.js-submit-button')!;
  const submitButtonPrice = submitButton.querySelector(
    '.js-submit-button-price'
  )!;
  const formNotification = document.querySelector('.notification-block')!;
  const formNotificationCloseBtn = document.querySelector(
    '.notification-block__close'
  )!;

  formNotificationCloseBtn.addEventListener('click', function () {
    formNotification.remove();
  });

  const disableForm = () => {
    form.classList.add('is-disabled');
  };

  const showFetchError = () => {
    submitButton.classList.remove('is-loading');
    submitButton.classList.add('is-error');
    submitButton.textContent = 'о ні! щось зламалось';
    toastManager.showError(
      'чомусь запит не відправився :( <br> напишіть, будь ласка, нам в телеграмі',
      {
        duration: 6000,
        content:
          '<a href="https://t.me/MenshikE" class="toast-telegram">телеграм</a>',
      }
    );
  };

  interface SendMessageParams {
    phone: string;
    telegram: string;
    bottles: string;
    months: string;
    invoiceId: string;
    url: string;
  }

  async function sendMessage({
    phone,
    telegram,
    bottles,
    months,
    invoiceId,
    url,
  }: SendMessageParams) {
    try {
      const { data, error } = await actions.submitSubscriptionForm({
        phone,
        telegram,
        bottles,
        months,
        invoiceId,
        paymentUrl: url,
      });

      // const url = `https://sik-backend-dev.netlify.app/.netlify/functions/send?phone=${phone}&telegram=${telegram}&bottles=${bottles}&months=${months}`;
      // const response = await fetch(url);
      // const data = await response.json();
      if (data?.ok) {
        submitButton.classList.remove('is-loading');
        submitButton.classList.add('is-success');
        submitButton.textContent = 'є! скоро вам напишемо';
      } else {
        showFetchError();
      }
    } catch (error) {
      showFetchError();
    }
  }

  const getPrices = (bottles: number | string, months: number) => {
    const bottlesMap: Record<number | string, Record<number, number>> = {
      1: {
        1: 1900,
        3: 5400,
        6: 10200,
        12: 19200,
      },
      2: {
        1: 4900,
        3: 14400,
        6: 28200,
        12: 55200,
      },
      special: {
        1: 11000,
        3: 32400,
        6: 63000,
        12: 120000,
      },
    };

    const sum = bottlesMap[bottles][months];
    const month = sum / months;
    return {
      sum,
      month,
    };
  };

  form.addEventListener('change', (e) => {
    const { bottles, months } = Object.fromEntries(new FormData(form));
    const { sum, month } = getPrices(bottles.toString(), Number(months));
    submitButtonPrice.textContent = sum.toString();
    if (months === '1') {
      footnote.classList.add('is-hidden');
      return;
    }

    const initialPrice = getPrices(Number(bottles), 1).month;
    footnoteOldPrice.textContent = initialPrice.toString();
    footnoteNewPrice.textContent = month.toString();
    footnote.classList.remove('is-hidden');
  });

  const generateMono = async ({
    price,
    bottles,
  }: {
    price: number;
    bottles: string;
  }) => {
    const body = {
      order_ref: crypto.randomUUID(),
      amount: 1,
      count: 1,
      products: [
        {
          name: bottles,
          cnt: 1,
          price,
        },
      ],
      dlv_method_list: ['np_brnm', 'np_box'],
      payment_method_list: ['card', 'part_purchase'],
      payments_number: 3,
      // redirectUrl: 'https://hovorovskyi.com/',
      // webHookUrl: 'https://hovorovskyi.com/monobank-webhook.json',
      returnUrl: 'https://hovorovskyi.com/',
      callbackUrl: 'https://hovorovskyi.com/monobank-webhook.json',
    };
    const res = await fetch('https://api.monobank.ua/personal/checkout/order', {
      method: 'POST',
      headers: {
        'X-Token': 'mE_rOIhSVb0SB9HdQa6ELRQ',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });

    const data = await res.json();
    return { invoiceId: data.result.order_id, url: data.result.redirect_url };
  };

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const phoneEl = document.querySelector('#phone')!;
    const telegramEl = document.querySelector('#telegram')!;
    telegramEl.classList.remove('has-error');
    phoneEl.classList.remove('has-error');
    const formData = new FormData(form);
    const { telegram, phone, bottles, months } = Object.fromEntries(
      formData
    ) as unknown as {
      telegram: string;
      phone: string;
      bottles: number | string;
      months: number;
    };
    const { sum, month } = getPrices(bottles.toString(), Number(months));

    if (!phone.trim()) {
      phoneEl.classList.add('has-error');
    }

    if (!telegram.trim()) {
      telegramEl.classList.add('has-error');
    }

    if (!telegram.trim() && !phone.trim()) {
      toastManager.showError('заповніть поля, будь ласка', {
        type: 'error',
      });
      return;
    }

    if (!telegram.trim() || !phone.trim()) {
      toastManager.showError('заповніть усі поля, будь ласка', {
        type: 'error',
      });
      return;
    }

    if (phone.match(PHONE_REGEX) === null) {
      toastManager.showError('введіть реальний телефон, будь ласка', {
        type: 'error',
      });
      return;
    }

    submitButton.classList.add('is-loading');
    disableForm();
    // await fetch('https://api.monobank.ua/personal/webhook', {
    //   method: 'POST',
    //   headers: {
    //     'X-Token': 'umXstJtTXl_8ib19uYUWFiRnE3pJF11NCVFC8jnCC3ao',
    //     'Content-Type': 'application/json',
    //   },
    //   body: JSON.stringify({
    //     webHookUrl: 'https://hovorovskyi.com/monobank-webhook.json',
    //   }),
    // });
    const { invoiceId, url } = await generateMono({
      price: sum,
      bottles: bottles.toString(),
    });
    setTimeout(() => {
      window.open(url, '_blank', 'noopener,noreferrer');
    });
    sendMessage({
      phone,
      telegram,
      bottles: bottles.toString(),
      months: months.toString(),
      invoiceId,
      url,
    });
  });

  const formObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          formNotification.classList.add('is-visible');
        } else {
          formNotification.classList.remove('is-visible');
        }
      });
    },
    {
      threshold: 1,
    }
  );

  formObserver.observe(form);
</script>
