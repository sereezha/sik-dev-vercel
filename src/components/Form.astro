---
import Button from '@components/Button.astro';
import { getPrices } from '../services/subscriptions/utils';
import Input from './input/Input.astro';
import InputPhone from './input/InputPhone.astro';
import type { Bottles, SubscriptionType } from 'src/services/subscriptions/types';
import { getFormSubmitButtonText } from 'src/services/subscriptions/config';

interface Props {
  months: number;
  bottles: Bottles;
  type: SubscriptionType;
}

const { months, bottles, type } = Astro.props;
const submitButtonText = getFormSubmitButtonText({ type, bottles, months });
---

<form
  data-js-form-type={type}
  class="form"
  id="subscribe-form"
  novalidate
  data-js-subscribe-form
>
  <div class="inputs">
    <InputPhone name="phone" id="phone-field" />
    <Input
      name="email"
      type="email"
      inputmode="email"
      label="Email"
      id="email-field"
    />
    <input id="bottles-field" type="hidden" name="bottles" value={bottles} />
    <input id="months-field" type="hidden" name="months" value={months} />
  </div>
  <div class="buttons">
    <Button
      type="submit"
      id="form-submit-button"
      data-analytics="checkout_button_submit_click">{submitButtonText}</Button
    >
  </div>
</form>

<style lang="scss">
  .form {
    display: grid;
    gap: 40px;
  }

  .inputs {
    display: grid;
    gap: 16px;

    @media screen and (min-width: $bp-tablet-min) {
      grid-template-columns: 1fr 1fr;
      gap: 24px;
    }
  }

  .buttons {
    --button-width: 100%;

    @media screen and (min-width: $bp-tablet-min) {
      --button-width: auto;

      display: flex;
      justify-content: end;
    }
  }
</style>

<script>
  import { actions } from 'astro:actions';
  import type { FormData, ValidationResult } from 'src/utils/form';
  import { validateForm } from '../utils/form';
  import { SessionStorageKeys } from 'src/constants/storage';
  import { ModalIds } from 'src/constants/modals';
  import { adaptedSessionStorage } from 'src/services/storage';
  import type { SubscriptionType } from 'src/services/subscriptions/types';

  const form = document.querySelector(
    '[data-js-subscribe-form]'
  )! as HTMLFormElement;
  const submitButton = form.querySelector('#form-submit-button')!;

  const setFormFieldValue = (selector: string, value: string) => {
    const field = form.querySelector(selector) as HTMLInputElement;
    if (field && value) {
      field.value = value;
    }
  };

  const initForm = () => {
    const checkout = JSON.parse(
      adaptedSessionStorage.get(SessionStorageKeys.CHECKOUT) || '{}'
    );

    setFormFieldValue('#phone-field', checkout.phone);
    setFormFieldValue('#email-field', checkout.email);
  };
  initForm();

  const disableForm = () => {
    submitButton.setAttribute('data-loading', '');
    form.classList.add('is-disabled');
  };

  const enableForm = () => {
    submitButton.removeAttribute('data-loading');
    form.classList.remove('is-disabled');
  };

  const showFetchError = () => {
    window.modalController.show(ModalIds.ERROR_MODAL);
    window.analyticsManager.track('checkout_error_modal_load');
  };

  const resetForm = () => {
    form.reset();
  };

  const getRequest = (type: SubscriptionType) => {
    return type === 'set'
      ? actions.subscribeForms.submitSetPreOrderForm
      : actions.subscribeForms.submitSubscriptionForm;
  };

  async function sendMessage({ email, phone, bottles, months }: FormData) {
    try {
      const formType = form.getAttribute(
        'data-js-form-type'
      ) as SubscriptionType;
      const request = getRequest(formType);
      const { data, error } = await request({
        email,
        phone,
        bottles,
        months,
      });

      if (data?.ok) {
        window.modalController.show(ModalIds.SUCCESS_MODAL);
        window.gtag('event', 'checkout_success_modal_loadнє');
        enableForm();
        resetForm();
      } else {
        showFetchError();
        enableForm();
      }
    } catch (error) {
      showFetchError();
    }
  }

  const clearErrors = () => {
    const phoneEl = form.querySelector('#phone-field')!;
    const emailEl = form.querySelector('#email-field')!;
    const errorFields = form.querySelectorAll('[data-error-message]');
    errorFields.forEach((field) => {
      field.textContent = '';
    });
    emailEl.classList.remove('has-error');
    phoneEl.classList.remove('has-error');
  };

  const displayErrors = (
    errors: Partial<Record<keyof FormData, string>>
  ): void => {
    for (const [field, message] of Object.entries(errors)) {
      const errorEl = form.querySelector(`#${field}-field-error`);
      const inputEl = form.querySelector(`#${field}-field`);
      if (errorEl instanceof HTMLElement && inputEl instanceof HTMLElement) {
        errorEl.textContent = message;
        inputEl.classList.add('has-error');
        inputEl.setAttribute('aria-invalid', 'true');
      }
    }
  };

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    clearErrors();
    const phoneEl = form.querySelector('#phone-field')! as HTMLInputElement;
    const formData = new FormData(form);
    let phoneValue = phoneEl.value;
    if (phoneEl.inputmask) {
      phoneValue = phoneEl.inputmask.unmaskedvalue();
      formData.append('phone', phoneValue);
    }
    const { errors, validatedData }: ValidationResult = validateForm(
      Object.fromEntries(formData) as unknown as FormData
    );

    if (Object.keys(errors).length > 0) {
      displayErrors(errors);
      return;
    }

    disableForm();
    sendMessage(validatedData as FormData);
  });
</script>
